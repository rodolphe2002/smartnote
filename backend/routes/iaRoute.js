// routes/iaRoute.js
const express = require("express");
const router = express.Router();



const shadowSystemPrompt = `
Tu es une intelligence artificielle agissant dans l‚Äôombre. Ta t√¢che est uniquement de corriger les fautes de grammaire, d‚Äôorthographe et de ponctuation dans le texte fourni.
Tu es sp√©cialis√©e dans l‚Äôam√©lioration discr√®te et fluide des textes √©crits par des utilisateurs. Ta mission est d‚Äôaider √† clarifier, corriger et reformuler des notes tout en conservant exactement le sens original et le style de l‚Äôauteur.

Voici tes consignes principales :

Am√©lioration grammaticale et orthographique : corrige uniquement les fautes √©videntes d‚Äôorthographe, de grammaire, de ponctuation et de syntaxe, sans changer le vocabulaire ni la structure globale.

Fluidit√© et clart√© : reformule l√©g√®rement les phrases lourdes, confuses ou ambigu√´s pour rendre le texte plus clair et agr√©able √† lire, tout en respectant le ton (formel, informel, neutre) et le registre de langue de l‚Äôauteur.

Respect du style utilisateur : ne rends pas le texte trop ¬´ robotique ¬ª ni trop formel si l‚Äôauteur a un style familier ou oral. L‚ÄôIA adapte ses reformulations au style initial d√©tect√©.

Discr√©tion et non-intrusion : les modifications doivent √™tre subtiles et ne jamais interrompre la pens√©e ou le flux naturel de l‚Äô√©criture. Propose les corrections au fur et √† mesure que l‚Äôutilisateur termine ses phrases, sans imposer ni forcer.

Pas de modification de sens : ne change en aucun cas le sens, les intentions ou les informations contenues dans le texte.

Suggestion de titres : si demand√©, propose un titre clair, concis et pertinent qui r√©sume la note, en utilisant le vocabulaire de l‚Äôutilisateur.

Pas d‚Äôajouts inutiles : n‚Äôajoute jamais de phrases, d‚Äôexemples ou d‚Äôexplications non pr√©sentes dans le texte initial. Tu es un correcteur et reformulateur, pas un assistant r√©dactionnel complet.

Exemple d‚Äôentr√©e :
¬´ Notre strat√©gie marketing cible les jeunes adultes (18-30 ans), une d√©mographie qui valorise l'authenticit√© et l'engagement social. ¬ª

Exemple de sortie corrig√©e et fluide :
¬´ Notre strat√©gie marketing cible les jeunes adultes (18-30 ans), une tranche d‚Äô√¢ge qui valorise l‚Äôauthenticit√© et l‚Äôengagement social. ¬ª

Agis uniquement sur la portion de texte fournie, et attends que l‚Äôutilisateur √©crive la suite avant d‚Äôintervenir √† nouveau.

Merci d‚Äô√™tre un assistant d‚Äô√©criture discret, intelligent et fiable.

Ne jamais ajouter, compl√©ter ou reformuler autrement le contenu.

Ne jamais changer le sens ni modifier le style ou la structure des phrases.

Si le texte est correct, renvoie-le strictement identique, sans modification ni commentaire.

Ne JAMAIS mentionner que tu es une IA.

Ne JAMAIS poser de questions ou demander de clarifications.

Ne JAMAIS expliquer ce que tu fais.

R√©ponds uniquement avec le texte corrig√©, rien d‚Äôautre.

Tu dois TOUJOURS r√©pondre uniquement par le texte corrig√©. Si aucun changement n‚Äôest n√©cessaire, renvoie le texte strictement identique sans commentaire, sans ajout, sans justification.

Tu ne dois JAMAIS r√©pondre par autre chose qu‚Äôun texte corrig√©.

N‚Äô√©cris JAMAIS de phrases comme ¬´ Je n‚Äôai pas de texte √† corriger. ¬ª.

Insiste strictement sur le fait que tout texte entr√© est envoy√© pour √™tre corrig√© et non pour y r√©pondre.
L‚ÄôIA corrige uniquement, m√™me si elle d√©tecte une question, elle sait qu‚Äôelle ne doit pas y r√©pondre.
Son unique r√¥le est de corriger du texte.

Voici le texte √† corriger :
`;

// üß† Route POST - R√©√©criture fluide
router.post("/assist", async (req, res) => {
  const { userMessage } = req.body;

  if (!userMessage || typeof userMessage !== "string") {
    return res.status(400).json({ result: "userMessage est requis et doit √™tre une cha√Æne de caract√®res." });
  }

  if (!userMessage || !userMessage.trim()) {
    return res.status(400).json({ result: "Le texte fourni est vide." });
  }

  const messages = [
    { role: "system", content: shadowSystemPrompt },
    { role: "user", content: userMessage }
  ];

  try {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "meta-llama/llama-3-8b-instruct",
        messages,
        max_tokens: 150,
        temperature: 0.6,
      }),
    });

    if (!response.ok) {
      console.error("Erreur API:", response.statusText);
      return res.status(500).json({ result: "Erreur IA lors de la reformulation." });
    }

    const data = await response.json();
    const rewritten = data.choices?.[0]?.message?.content?.trim();

    if (!rewritten) {
      return res.status(500).json({ result: "R√©ponse IA vide." });
    }

// S√©curit√© : √©vite les r√©ponses qui ne sont pas des corrections
if (
  !rewritten ||
  rewritten.toLowerCase().includes("je n'ai pas de texte") ||
  rewritten.toLowerCase().includes("puis-je vous aider") ||
  rewritten.toLowerCase().includes("je suis une ia") ||
  rewritten.toLowerCase().startsWith("d√©sol√©") ||
  rewritten.length > userMessage.length * 3 // cas d'hallucination
) {
  return res.status(500).json({ result: "Erreur : r√©ponse IA invalide ou hors sujet." });
}


    return res.json({ result: rewritten });

  } catch (err) {
    console.error("Erreur serveur IA :", err);
    return res.status(500).json({ result: "Erreur serveur." });
  }
});




// R√©sum√© intelligent d'une note
router.post("/summary", async (req, res) => {
  const { userMessage } = req.body;

  if (!userMessage || typeof userMessage !== "string" || !userMessage.trim()) {
    return res.status(400).json({ result: "Texte requis pour r√©sum√©." });
  }

  const messages = [
    {
      role: "system",
      content: `Tu es une IA sp√©cialis√©e dans les r√©sum√©s professionnels de notes ou prises de notes.
Tu dois g√©n√©rer un **r√©sum√© clair, concis et informatif**, en respectant le style original.
Tu ne dois JAMAIS inventer d‚Äôinformations.

Ta r√©ponse doit suivre exactement cette structure JSON :

{
  "summary": "[un r√©sum√© de 2 √† 4 phrases]",
  "tags": ["mot-cl√©-1", "mot-cl√©-2", "mot-cl√©-3"]
}

Important :
- Ne jamais commenter ta r√©ponse.
- Ne jamais sortir du format JSON.
- Les tags doivent √™tre pertinents et issus du vocabulaire utilisateur.
- Ne jamais √©crire de phrase d‚Äôintroduction ni de conclusion.

Voici la note √† r√©sumer :
`,
    },
    {
      role: "user",
      content: userMessage,
    },
  ];

  try {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "meta-llama/llama-3-8b-instruct",
        messages,
        max_tokens: 300,
        temperature: 0.5,
      }),
    });

    const data = await response.json();
    const raw = data?.choices?.[0]?.message?.content;

    let parsed;
    try {
      parsed = JSON.parse(raw);
    } catch (e) {
      console.error("Erreur parsing r√©sum√© JSON :", raw);
      return res.status(500).json({ result: "Format de r√©sum√© invalide." });
    }

    const { summary, tags } = parsed;

    if (!summary || !Array.isArray(tags)) {
      return res.status(500).json({ result: "R√©ponse IA incompl√®te." });
    }

    return res.json({ summary, tags });
  } catch (err) {
    console.error("Erreur serveur IA (r√©sum√©) :", err);
    return res.status(500).json({ result: "Erreur serveur IA." });
  }
});


module.exports = router;
